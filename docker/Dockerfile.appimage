# Container for building AppImage packages
FROM ubuntu:24.04 AS builder

# Avoid timezone interaction
ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies for AppImage building
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    pkg-config \
    git \
    curl \
    wget \
    libayatana-appindicator3-dev \
    libgtk-3-dev \
    libglib2.0-dev \
    libdbus-1-dev \
    ffmpeg \
    alsa-utils \
    file \
    desktop-file-utils \
    fuse \
    libfuse2 \
    xsel \
    wl-clipboard \
    xdotool \
    ydotool \
    libnotify-bin \
    && rm -rf /var/lib/apt/lists/*

# Install Go
ENV GO_VERSION=1.24.1
RUN curl -L "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" | tar -C /usr/local -xzf -
ENV PATH="/usr/local/go/bin:${PATH}"

# Set working directory
WORKDIR /app

# Copy project sources (better cache on go.mod/go.sum first)
COPY go.mod go.sum ./
RUN go mod download
COPY . .

# Create necessary directories
RUN mkdir -p lib sources build dist

# Build script for AppImage (use unified script from bash-scripts)
COPY bash-scripts/build-appimage.sh /usr/local/bin/build-appimage.sh
RUN chmod +x /usr/local/bin/build-appimage.sh

# Set environment variables for CGO
ENV CGO_ENABLED=1
ENV C_INCLUDE_PATH="/app/lib"
ENV LIBRARY_PATH="/app/lib"
ENV CGO_CFLAGS="-I/app/lib"
ENV CGO_LDFLAGS="-L/app/lib -lwhisper -lggml-cpu -lggml"
ENV LD_LIBRARY_PATH="/app/lib"
ENV PKG_CONFIG_PATH="/app/lib"

# Optional version from build-arg
ARG APP_VERSION
ENV APP_VERSION=${APP_VERSION}

# Whisper.cpp version pin for reproducible builds
ARG WHISPER_CPP_REF=v1.7.6
ENV WHISPER_CPP_REF=${WHISPER_CPP_REF}

# Legacy build flag for older CPUs
ARG LEGACY_BUILD=0
ENV LEGACY_BUILD=${LEGACY_BUILD}

# Build AppImage at image build time so docker build can produce artifacts
RUN /usr/local/bin/build-appimage.sh

# Export artifacts stage
FROM scratch AS artifacts
COPY --from=builder /app/dist/ /