name: Build Releases

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: '0.1.0'

permissions:
  contents: write
  actions: read

jobs:
  build-appimage:
    strategy:
      matrix:
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    # Temporarily disable Go modules cache due to tar extraction issues
    # - name: Cache Go modules  
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       ~/.cache/go-build
    #       ~/go/pkg/mod
    #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
    #     restore-keys: |
    #       ${{ runner.os }}-go-
        
    - name: Debug - Show environment
      run: |
        echo "=== Environment Debug ==="
        echo "Go version: $(go version)"
        echo "Working directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Go mod contents:"
        cat go.mod
        echo "========================"
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xclip \
          wl-clipboard \
          libnotify-bin \
          libasound2-dev \
          libx11-dev \
          libxext-dev \
          libxi-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxinerama-dev \
          libayatana-appindicator3-dev \
          libgtk-3-dev \
          libglib2.0-dev \
          libdbus-1-dev \
          libdbus-glib-1-dev \
          ffmpeg \
          alsa-utils \
          wget \
          build-essential \
          pkg-config \
          cmake \
          valgrind \
          imagemagick \
          make
          
    - name: Create application icon
      run: |
        # Create a simple icon if not exists
        if [ ! -f "icons/io.github.ashbuk.speak-to-ai.png" ]; then
          echo "Creating application icon..."
          mkdir -p icons
          # Create a simple microphone icon
          convert -size 256x256 xc:'#2196F3' \
            -fill white -draw "circle 128,128 128,48" \
            -fill '#1976D2' -pointsize 120 -gravity center \
            -annotate +0+0 "üé§" \
            icons/io.github.ashbuk.speak-to-ai.png
          echo "‚úÖ Icon created successfully"
        else
          echo "‚úÖ Icon already exists"
        fi
          
    - name: Build application
      run: |
        echo "=== Building application with Makefile ==="
        make all
        echo "Build successful, binary info:"
        ls -la speak-to-ai
        file speak-to-ai
        echo "========================"
          
    - name: Download Whisper model if not present
      run: |
        if [ ! -f "sources/language-models/base.bin" ]; then
          echo "Downloading Whisper base model..."
          mkdir -p sources/language-models
          wget -q "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-base.bin" \
            -O "sources/language-models/base.bin"
          echo "Model downloaded, size: $(ls -lh sources/language-models/base.bin)"
        fi
        
    - name: Debug - Pre-build status
      run: |
        echo "=== Pre-build Debug ==="
        echo "Library structure:"
        ls -la lib/
        echo "AppImage script exists:"
        ls -la bash-scripts/build-appimage.sh
        echo "========================"
        
    - name: Build AppImage
      env:
        APP_VERSION: ${{ github.event.inputs.version || github.ref_name }}
      run: |
        chmod +x bash-scripts/build-appimage.sh
        bash -x bash-scripts/build-appimage.sh
        
    - name: Verify AppImage
      run: |
        # Check if AppImage is executable and valid
        echo "Checking AppImage artifacts..."
        ls -lh dist/*.AppImage
        for appimage in dist/*.AppImage; do
          echo "Verifying: $appimage"
          chmod +x "$appimage"
          file "$appimage"
          # Check if it's a valid AppImage
          if "$appimage" --appimage-help > /dev/null 2>&1; then
            echo "‚úÖ Valid AppImage: $appimage"
          else
            echo "‚ö†Ô∏è AppImage validation failed for: $appimage"
          fi
        done
        
    - name: Upload AppImage artifact
      uses: actions/upload-artifact@v4
      with:
        name: speak-to-ai-appimage-${{ matrix.os }}
        path: |
          dist/speak-to-ai-*.AppImage
          !dist/tools/
        
  build-flatpak:
    strategy:
      matrix:
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    # Temporarily disable Go modules cache due to tar extraction issues
    # - name: Cache Go modules  
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       ~/.cache/go-build
    #       ~/go/pkg/mod
    #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
    #     restore-keys: |
    #       ${{ runner.os }}-go-
          
    - name: Cache Flatpak builder
      uses: actions/cache@v4
      with:
        path: |
          .flatpak-builder
          dist/flatpak/.flatpak-builder
        key: ${{ runner.os }}-flatpak-${{ hashFiles('io.github.ashbuk.speak-to-ai.json') }}
        restore-keys: |
          ${{ runner.os }}-flatpak-
      
    - name: Debug - Show environment
      run: |
        echo "=== Flatpak Environment Debug ==="
        echo "Working directory: $(pwd)"
        echo "Flatpak manifest exists:"
        ls -la io.github.ashbuk.speak-to-ai.json
        echo "Flatpak script exists:"
        ls -la bash-scripts/build-flatpak.sh
        echo "========================"
      
    - name: Install Flatpak and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          flatpak \
          flatpak-builder \
          cmake \
          build-essential \
          libayatana-appindicator3-dev \
          libgtk-3-dev \
          libglib2.0-dev \
          libdbus-1-dev \
          libdbus-glib-1-dev \
          ninja-build \
          autotools-dev \
          automake \
          autoconf \
          libtool \
          valgrind \
          valac
        # Use user remote instead of system remote
        flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        flatpak install --user -y flathub org.gnome.Platform//45 org.gnome.Sdk//45
        flatpak install --user -y flathub org.freedesktop.Sdk.Extension.golang//23.08
        flatpak install --user -y flathub org.freedesktop.Sdk.Extension.vala//23.08
        
    - name: Download Whisper model if not present
      run: |
        if [ ! -f "sources/language-models/base.bin" ]; then
          echo "Downloading Whisper base model..."
          mkdir -p sources/language-models
          wget -q "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-base.bin" \
            -O "sources/language-models/base.bin"
        fi
        
    - name: Install make for Flatpak build
      run: |
        sudo apt-get install -y make
        
    - name: Pre-download Go modules for Flatpak
      run: |
        echo "Pre-downloading Go modules..."
        go mod download
        go mod verify
    
    - name: Configure git for authenticated GitHub clones
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Configuring git to use token for https://github.com clones"
        git config --global http.https://github.com/.extraheader "AUTHORIZATION: basic $(printf "x-access-token:%s" "$GH_TOKEN" | base64 -w0)"
        git config --global url."https://github.com/".insteadof "git@github.com:"
        
    - name: Verify manifest checksums
      run: |
        echo "Verifying manifest checksums are correct..."
        grep -q "82b15a944a5e82fee15e0f6116bd9f642bc3d0bb6989fc0ca5ad9dfe35de0847" io.github.ashbuk.speak-to-ai.json && echo "‚úÖ xdotool SHA256 correct" || echo "‚ùå xdotool SHA256 incorrect"
        grep -q "da91786d828b6a6e29b884bc510473939eda052658ebef87d7bdeafa6a8746f9" io.github.ashbuk.speak-to-ai.json && echo "‚úÖ wtype SHA256 correct" || echo "‚ùå wtype SHA256 incorrect"
        
    - name: Build Flatpak package
      run: |
        mkdir -p dist/flatpak
        
        # Build with dependencies
        flatpak-builder \
          --force-clean \
          --user \
          --install-deps-from=flathub \
          --install-deps-only \
          --ccache \
          --repo=dist/flatpak/repo \
          dist/flatpak/build-dir \
          io.github.ashbuk.speak-to-ai.json
          
        # Build the actual package
        flatpak-builder \
          --force-clean \
          --user \
          --ccache \
          --repo=dist/flatpak/repo \
          dist/flatpak/build-dir \
          io.github.ashbuk.speak-to-ai.json
          
    - name: Create flatpak bundle
      env:
        APP_VERSION: ${{ github.event.inputs.version || github.ref_name }}
      run: |
        OUT_NAME="speak-to-ai-${APP_VERSION}.flatpak"
        flatpak build-bundle \
          --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo \
          dist/flatpak/repo \
          "dist/${OUT_NAME}" \
          io.github.ashbuk.speak-to-ai
          
    - name: Verify Flatpak
      run: |
        # Check flatpak file size and structure
        echo "Checking Flatpak artifact..."
        ls -lh dist/*.flatpak
        file dist/*.flatpak
        
        # Verify it's a valid flatpak bundle
        if file dist/*.flatpak | grep -q "Squashfs filesystem"; then
          echo "‚úÖ Valid Flatpak bundle structure"
        else
          echo "‚ö†Ô∏è Flatpak bundle validation failed"
        fi
        
        # Check file size (should be reasonable, not too small or huge)
        SIZE=$(stat -c%s dist/*.flatpak | head -n1 | awk '{print $1}')
        if [ $SIZE -gt 10485760 ] && [ $SIZE -lt 524288000 ]; then  # 10MB < size < 500MB
          echo "‚úÖ Flatpak size is reasonable: $(numfmt --to=iec $SIZE)"
        else
          echo "‚ö†Ô∏è Flatpak size seems unusual: $(numfmt --to=iec $SIZE)"
        fi
          
    - name: Upload Flatpak artifact
      uses: actions/upload-artifact@v4
      with:
        name: speak-to-ai-flatpak-${{ matrix.os }}
        path: dist/*.flatpak
        
  create-release:
    needs: [build-appimage, build-flatpak]
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download AppImage artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: speak-to-ai-appimage-*
        path: ./artifacts/
        merge-multiple: true
        
    - name: Download Flatpak artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: speak-to-ai-flatpak-*
        path: ./artifacts/
        merge-multiple: true
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/*.AppImage
          ./artifacts/*.flatpak
        body: |
          ## Speak-to-AI Release ${{ github.ref_name }}
          
          ### Features:
          -  Offline speech-to-text using Whisper.cpp
          -  System tray integration with recording status
          -  Microsoft Copilot key support (AltGr + ,)
          -  Multiple output modes: clipboard, direct typing
          -  Cross-platform support for X11 and Wayland
          -  Privacy-first: no data sent to external servers
          
          ### Installation:
          
          **AppImage:**
          ```bash
          chmod +x speak-to-ai-*.AppImage
          ./speak-to-ai-*.AppImage
          ```
          
          **Flatpak:**
          ```bash
          flatpak install speak-to-ai-*.flatpak
          flatpak run io.github.ashbuk.speak-to-ai
          ```
          
          ### System Requirements:
          - Linux (Ubuntu 20.04+, Fedora 35+, or similar)
          - X11 or Wayland desktop environment
          - Audio recording capability (microphone)
          - ~200MB disk space for model and dependencies
          
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 