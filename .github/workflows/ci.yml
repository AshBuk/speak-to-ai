name: CI

on:
  push:
    branches:
      - master
      - main
  pull_request:
permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Configure Go env
        run: |
          go env -w GOPROXY=https://proxy.golang.org,direct
          go env -w GO111MODULE=on

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.8
          args: --timeout=5m

  test:
    runs-on: ubuntu-22.04
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.x'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Configure Go env
        run: |
          go env -w GOPROXY=https://proxy.golang.org,direct
          go env -w GO111MODULE=on

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git

      - name: Build whisper.cpp libs
        run: make whisper-libs

      - name: Export CGO environment
        run: |
          echo "C_INCLUDE_PATH=$PWD/lib" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$PWD/lib" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I$PWD/lib" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L$PWD/lib -lwhisper -lggml-cpu -lggml" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$PWD/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Download modules
        run: |
          go mod download
          go mod verify

      - name: Run unit tests
        run: make test

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out
